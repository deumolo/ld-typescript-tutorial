// ESSENTIAL TYPESCRIPT

1.- En typescript, cuando se inicializa una variable, el tipo de variable que se use,
hará que esa variable solo acepte ese tipo durante todo el archivo.

2.- En caso de que una variable no tenga un valor inicial, se puede declarar el tipo sin un valor inicial.

Ejemplo:

    let testString: string;
    testString = "hello"

3.- Se pueden asignar multiples tipos a una variable, esto se hace con el simbolo de pipe (|):

Ejemplo:

    let stringOrNumber: string | number;
    let stringOrNumber: string | number = "hello";
    let stringOrNumber: stribong | number = 8;

4.- Se puede seguir este patrón de logica para asignar un tipo de valores en un arreglo.

Ejemplo:

    let names = ["John", "Sara", "Ana"];

Este arreglo solo aceptará valores de tipo string al momento de querer agregar nuevos elementos por medio de push.

5.- Para asignar el tipo a un array sin valores iniciales, se puede seguir este ejemplo:
    let testStringArray : string[];

6.- Para asignar multiples tipos de valores a un array se usa el siguiente ejemplo:
    let testStringOrNumberArray : (string | number)[];
    testStringOrNumberArray = ["hello", 8];

7.- Con objetos no es necesario declarar el tipo de variable, ya que se puede hacer de la siguiente manera:

    let testObject = {
        name: "John",
        age: 30
    }

Pero una vez que una propiedad X de un objeto Y es declarada, el tipo de variable de esa propiedad X no puede ser cambiado.

En el ejemplo, name siempre debe ser string y age siempre debe ser numero

8.- No se le puede agregar valores a una propiedad que no existe en un objeto, a menos que se declare el tipo de variable.

9.- Un objeto sin valores iniciales pero con tipos asignados solo puede llenarse completando todos los valores de las propiedades.

10.- Para declarar una propiedad opcional en un objeto, se usa el simbolo de interrogación (?).

Ejemplo:   
    let userObj2 : {
        username: string;
        age: number;
        isAdmin: boolean;
        phone?. number;
    }

11.- Este valor podría existir o no y no marcar una alerta.

12.- Se puede usar el tipo 'any' libremente, pero esta deja muy fuera las herramientas de typescript.

13.- Al no declarar un tipo en una variable, el default es 'any'

// FUNCTIONS 

14.- Con una función es igual, si se declara dentro de una variable o constante, este nombre solo se podrá usar con funciones

También si no se regresa nada y se había especificado un traceDeprecation, marcaría error.

15.- En una función se puede especificar el tipo de valor que va a regresar, como el siguiente ejemplo:

const addNumbers = (a: number, b: number): number => {
    return a + b;
}

16.- Al contrario del punto 14, si se asigna el valor tipo void a una función y esta regresa un valor,
el editor marcará error

17.- Para agregar un parametro opcional se usa el simbolo '?' de la siguiente manera:

const addNumbers = (a: number, b: number, another?:number): number => {
    return a + b;
} 

// TYPE ALIASES 

18.- Para crear un tipo de variable personalizado, se usa la palabra reservada 'type', esto sirve para funciones 
en las que la especificacion de tipos pude tomar un tamaño grande, en el siguiente ejemplo se usará para definir
el tipo de un objeto:

type UserType = {
    username: string;
    age: number;
    phone?: number;
}

let betterFunction = (user: UserType) => {
    console.log(user.username);
}

19.- Un caso raro pero que podía usarse es crear un function prototype, de la siguiente manera:

type printerFunc =  (a:number,b:number) => void

let write : printerFunc = (a,b) => {
    console.log(a + b);
}

De esta manera se pude especificar la manera de una función de constuirse y usarse para otras tareas

20.- Usando un valor de opción fija se pueden definir valores aceptados para una variable o propiedad de un objeto,
esto se hace de la siguiente manera:

type UserType2 = {
    username: string;
    age: number;
    phone?: number; 
    theme: "dark" | "light";
}

// INTERFACES

21.- En el caso de necesitar agregar propiedades a un type ya existente, se pueden usar interfaces,
ya que estas dan la opción de ser heredadas y extendidas, podemos usar el siguiente ejemplo:

interface IUser {
    username: string;
    age: number;
    phone?: number;
}

interface IEmployee extends IUser {
    salary: number;
    position: string;
}

const employee: IEmployee = {
    username: "John",
    age: 30,
    salary: 5000,
    position: "Developer"
}

// GENERICS

22.- Generics en typescript son plantillas de codigo que se pueden usar y reutilizar para seguir un patron de desarrollo
en nuestros archivos.

23.- En base al siguiente ejemplo de una interfaz que acepta un valor extra como un arreglo de objetos tipo IAuthor o ICategory

interface IPost {
    id: number;
    title: string;
    desc: string;
    extra: IAuthor[] | ICategory[];
}

Se puede refactorizar de la siguiente manera, declarando un tipo de variable generico, y declarando que el valor extra pueda
tomar cualquier tipo de valor.

interface IPostBetter<T> {
    id: number;
    title: string;
    desc: string;
    extra: T[];
}

Un ejemplo de implementacion de esta interfaz sería la siguiente:

const testMe: IPostBetter<String> = {
    id: 1,
    title: 'test',
    desc: 'test',
    extra: ['test', 'test2'],
};

24.- Para declarar un tipo de variable objeto para utilizarse de una interfaz se extiende el object en T:

interface IPostEvenBetter<T extends Object> {
    id: 1;
    title: 'test';
    desc: 'test';
    extra: T[];
}

Para implementar esta interfaz con el valor declarado como objeto se pueden tomar dos alternativas:

a) Se puede declarar la estructura del objeto manualmente:

const testMe2: IPostEvenBetter<{ id: number; username: string }> = {
    id: 1,
    title: 'test',
    desc: 'test',
    extra: [{ id: 1, username: 'test' }],
};

b) Se puede agregar una interfaz previamente creada :

const testMe3: IPostEvenBetter<IAuthor> = {
    id: 1,
    title: 'test',
    desc: 'test',
    extra: [{ id: 1, username: 'test' }],
};

// React + Typescript -- Props

25.- Para declarar los props usados, en el mismo lugar se pueden declarar los nombres de las propiedades a recibir.

const PostCard = ({ title: string; body: string; }) => {
  return (
    <div>
        <div>{props.title}</div>
        <div>{props.body}</div>
    </div>
  )
}

export default PostCard

26.- De igual manera si al momento de usar un componente no se le asigna un valor a una propiedad esperada 
se marcará error

import Postcard from './PostCard'

const PostList = () => {
  return (
    <div>
        <PostCard title="test" body="desc" />

        <!-- En este uso se marcaría un error -->
        <PostCard />
    </div>
  )
}

export default PostCard

27.- Dentro de un proyecto donde se repitan mucho se pueden crear archivos de tipos de variables personalizados 
e importarlos donde se necesite.

Se puede crear un archivo PostProps.ts con el siguiente contenido:

export type PostProps: { id: number; title: string; body: string; }

Dentro del componente a utilizar este tipo se importa el archivo y se reemplaza por el código más largo:

import { PostProps } from './PostProps'

const PostCard = ( props: PostProps ) => {
  return (
    <div>
        <div>{props.title}</div>
        <div>{props.body}</div>
    </div>
  )
}

28.- También se puede especificar cuando un componente recibirá otro componente como parte de sus props, en este 
caso la propiedad children:

Lo que sería la sintaxis original de react sin typescript para declarar a children como un componente:

const Parent = ({children}) => {
  return (
    <div>Parent</div>
  )
}

export default Parent

Se puede cambiar a la siguiente manera para especificar que children es un componente:

const Parent = ( {children} : { children: React.ReactNode } ) => {
  return (  
    <div>Parent</div>
  )
}

export default Parent

Dentro de un componente mayor una página de Next.js se puede usar de la siguiente manera:

import Child from './Child'

const Page = () => {
  return (  
    <Parent>
        <Child />
    </Parent>
  )
}

export default Page

// React + Typescript -- React Event

29.- En funciones se puede declarar el tipo de evento que se va a recibir, dos ejemplos rápidos pueden ser en un 
evento de click o un cambio en un input.

a) Un ejemplo de un evento de click puede ser el siguiente:

const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
  };

Se tiene que declarar primero el evento, y es opcional si se quiere declarar el tipo de elemento que se va a recibir.

En el caso anterior el tipo de evento es React.MouseEvent y el elemento donde se ejecutó el evento es HTMLButtonElement.

b) Un ejemplo de un evento de cambio en un input puede ser el siguiente:

const handleClick = (e: React.ChangeEventHandler<HTMLInputElement>) => {
    console.log(e.target.value);
  };

30.- Una función que contiene un evento y uno o más parametros se declara de la siguiente manera:

const handleDelete = (e: React.MouseEvent<HTMLButtonElement>, id: number) => {
    e.preventDefault();
    console.log('Post id : ', id);
  };

De la misma manera que las funciones anteriores, la declaracion del evento y su elemento relacionado sigue siendo solo
parametro regular de una funcion.

31.- Al momento de ejecutar una funcion que incluye el objeto e se tiene que declarar de la siguiente manera:

<button onClick={(e) => { handleDelete(e, 2); }}>Print</button>

Al incluir un parametro extra se tiene que incluir el objeto e.

32.- Si la funcion no incluye parametros extra al objeto e se puede declarar de la siguiente manera:

<button onClick={(e) => { handleDelete(); }}>Print</button>

El objeto e se incluiría por default.

// useState 

33.- Para declarar el tipo de dato que se va a recibir en un useState se tiene que declarar de la siguiente manera:

type UserType = {
    name: string;
    age: number;
};

const [user, setUser] = useState<UserType | null>(null);

En caso de que el valor inicial sea null se debe agregar ambas opciones como valores posibles en el tipo a declarar.

// ContextApi 

34.- El siguiente ejemplo es la forma de usar contextapi con typescript:

type StateType = { 
    theme: string;
    fontSize: number;
}

type ActionType = { 
    type: 'CHANGE_THEME' | 'CHANGE_FONT_SIZE';
    payload: string | number;
}

const INITIAL_STATE = {
    theme: 'dark',
    fontSize: 14,
}

const reducer = (state: StateType, action: ActionType) => {
switch (action.type) {
    case 'CHANGE_THEME':
    return {
        ...state,
        theme: state.theme === 'dark' ? 'light' : 'dark',
    };
    case 'CHANGE_FONT_SIZE':
    return {
        ...state,
        fontSize: action.payload,
    };
    default:
    return state;
}
};

export const ThemeContext = createContext<{state: StateType; dispatch: React.Dispatch<ActionType>}>; 

35.- Para usar el contextapi se tiene que declarar de la siguiente manera:

const [state, dispatch] = useReducer(reducer, INITIAL_STATE);

export const ThemeProvider = ({children: React.ReactNode}) => {
    return <ThemeContext.Provider  value={{state, dispatch}} >{children}</ThemeContext.Provider>;
}

En el ejemplo anterior se puede observar que para utilizar nuestro reducer y context provider inicial escritos con typescript
la unica diferencia es al momento de crear el context provider, donde se tiene que declarar el tipo de dato que se va a recibir
que en este caso es el de react node para los elementos que serán envueltos por el provider.

// useRef

36.- Para usar typescript con la creación de una referencia, sencillamente solo se tiene que declarar el elemento html de la 
siguiente manera:

const inputRef = useRef<HTMLInputElement>(null);

// Typescript Combined Types and Exclude

37.- Usando el operador OR, se pueden declarar un combinado de opciones para cierta variable, por ejemplo:

type ShapeType = "cube" | "circle" | "square";

Esto haría que una variable o propiedad que use este tipo de dato solo pueda recibir uno de los tres valores declarados.

38.- Usando el operador Exclude se puede excluir una de las opciones declaradas en el tipo de dato, por ejemplo:
type TwoDimensionalShape = Exclude<ShapeType, "cube">;

Esto haría que una variable o propiedad que use este tipo de dato solo pueda recibir uno de los dos valores declarados,
dejando fuera el valor asignado en el exclude.